// Declares clang::SyntaxOnlyAction.
#include "clang/Frontend/FrontendActions.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include <iostream>
#include <sstream>

// Declares llvm::cl::extrahelp.
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/FileSystem.h"
using namespace clang::tooling;
using namespace llvm;
#define ONLY_LD
#include <compiler_options.hpp>

int main(int argc, const char **argv) {

  cl::SetVersionPrinter([](llvm::raw_ostream& os) {
        os << "enumivo-ld version " << "${VERSION_FULL}" << "\n";
  });
  cl::ParseCommandLineOptions(argc, argv, "enumivo-ld (WebAssembly linker)");
  Options opts = CreateOptions();

  std::string line;
  if (opts.native) {
#ifdef __APPLE__
     if (!enumivo::cdt::environment::exec_subprogram("ld", opts.ld_options, true))
#else
     if (!enumivo::cdt::environment::exec_subprogram("ld.lld", opts.ld_options))
#endif
         return -1;
  } else {
      if (!enumivo::cdt::environment::exec_subprogram("wasm-ld", opts.ld_options))
         return -1;
  }
  if ( !llvm::sys::fs::exists( opts.output_fn ) ) {
     return -1;
  }

  // finally any post processing
  if (!fno_post_pass_opt && !opts.native) {
     if ( !llvm::sys::fs::exists( opts.enumivo_pp_dir+"/enumivo-pp" ) ) {
        std::cout << "Error: enumivo.pp not found! (Try reinstalling enumivo.wasmsdk)" << std::endl;
        return -1;
     }
     if (!enumivo::cdt::environment::exec_subprogram("enumivo-pp", {opts.output_fn})) 
        return -1;
     if ( !llvm::sys::fs::exists( opts.output_fn ) ) {
        return -1;
     }
   }
  return 0;
}
